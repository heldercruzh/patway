COMANDOS
docker image list
docker image pull python
docker image inspect python
docker container run -it --rm -p 80:8080 --name meu_python python
docker container list -a
docker container stop meu_python

docker-compose -f "docker-compose.yml" up -d --build




DOCKER FILE ANGULAR

FROM nginx:alpine as customers_angular
WORKDIR '/usr/share/nginx/html/'
VOLUME /var/cache/nginx
# NPM + NODE
RUN apk add nodejs
RUN apk add npm
COPY package.json .
RUN npm install --silent
COPY . .
ENTRYPOINT ["npm", "run", "start"]
#CMD cd /app && npm install && npm start --external 

#FROM node:14.2.0-alpine as customers_angular
#WORKDIR /app
#COPY package.json /app
#RUN npm install --silent
#COPY . .
#RUN npm run build

#FROM nginx:alpine
#VOLUME /var/cache/nginx
#COPY --from=customers_angular app/dist/frontend /usr/share/nginx/html
#COPY ./config/nginx.conf /etc/nginx/conf.d/default.conf

#/* proxy-config proxy.conf.js */

DOCKER FILE JAVA EXEMPLO

FROM openjdk:8-jdk-alpine as petwayapi
RUN addgroup -S spring && adduser -S spring -G spring
USER spring:spring
ARG JAR_FILE=target/*.jar
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java","-jar","/app.jar"]

DOCKER COMPOSE EXEMPLO

version: '3.4'

services:

  db:
    image: postgres:latest
    network_mode: bridge
    container_name: db
    volumes:
      - ./db/postgresql/data
    expose:
      - 8081
    ports:
      - 8084:5432  
    restart: always 
    environment:
      POSTGRES_DB: petway
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      PGDATA: ./db/postgresql/data
              
         
  backend:
    image: petwayapi
    build: ./petwayapi/
    network_mode: bridge
    container_name: petwayapi
    volumes: 
      - ./petwayapi/target
    expose:
      - 8082
    ports:
      - 8082:8080
    #restart: always
    depends_on:
      - "db"
    links:
      - "db"
      
  frontend:  
    image: petwayfrontend
    build: ./petwayfrontend/
    network_mode: bridge
    container_name: petwayfrontend    
    volumes: 
      - ./petwayfrontend/
    logging:
        driver: "json-file"
        options:
            max-size: "10m"
            max-file: "5"
    expose:
      - 8083
    ports:
      - 8081:80
    restart: always
    depends_on:
      - "backend"
    links:
      - "backend"
      
      

